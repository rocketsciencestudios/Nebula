package rss.nebula.video.threesixty {	import away3d.arcane;	import away3d.materials.MovieMaterial;	import org.osflash.signals.Signal;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.NetStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.text.StyleSheet;	import flash.text.TextField;		/**	 * @author Ralph Kuijpers @ Rocket Science Studios	 */	 	use namespace arcane;	public class VideoMaterialController extends MovieMaterial {		public static var PLAYING : Number = 0;		public static var PAUSED : Number = 1;		public static var STOPPED : Number = 2;		/**		 * A Sprite we can return to the MovieMaterial		 */		public var sprite : Sprite;		// signals		public var playbackStarted : Signal = new Signal();		public var progress : Signal = new Signal(Number);		public var bufferFull : Signal = new Signal();		public var metaReceived : Signal = new Signal();		public var playbackCompleted : Signal = new Signal();				public var videoWidth : Number = 0;		public var videoHeight : Number = 0;		public var videoFPS : Number;		public var videoDuration : Number;		public var autoSize : Boolean = false;		//		public var status : Number;				private var _file : String;		private var _text : TextField;		private var _video : Video;		private var _loop : Boolean;		private var _lockW : Number;		private var _lockH : Number;				private var _connection : NetConnection;		private var _stream : NetStream;		private var _listener : Object;		/**		 * Creates a new <code>VideoMaterialController</code> object.		 * Pass file:"somevideo.flv" in the initobject or set the file to start playing a video.		 * Be aware that FLV files must be located in the same domain as the SWF or you will get security errors.		 */		 		public function VideoMaterialController(width : Number = 320, height : Number = 240, initObj : Object = null) {			sprite = new Sprite();			super(sprite, ini);						_connection = new NetConnection();			_connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			_connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler, false, 0, true);			_connection.connect(null);			_stream = new NetStream(_connection);			_stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);			_listener = new Object();			_listener.onMetaData = onMetaData;			_stream.client = _listener;						this.movie = sprite;			video = new Video(width, height);			videoWidth = width;			videoHeight = height;			// applying all the initObj values to the class			if (initObj)				for (var param:String in initObj)					this[param] = initObj[param];								updateDimensions();		}				// .. CONTROL METHODS .............................................................................		public function load(file : String = null) : void {			_stream.play(file);			status = VideoMaterialController.STOPPED;		}		public function play(percent : Number = 0) : void {			var position : Number = percent * videoDuration;			_stream.seek(position);			// stream.play(file);			status = VideoMaterialController.PLAYING;		}				public function seek(percent : Number) : void {			var position : Number = percent * videoDuration;			_stream.seek(position);		}		public function resume() : void {			if (_stream.time >= videoDuration) {				_stream.seek(0);			}						_stream.resume();			status = VideoMaterialController.PLAYING;		}		public function pause() : void {			_stream.pause();			status = VideoMaterialController.PAUSED;		}		public function close() : void {			_stream.close();			status = VideoMaterialController.STOPPED;		}		public function jumpTime(amount : Number) : void {			_stream.seek(_stream.time + amount);		}		public function set volume(volume : Number) : void {			_stream.soundTransform = new SoundTransform(volume);		}		public function get volume() : Number {			return _stream.soundTransform.volume;		}		public function isPlaying() : Boolean {			return status == PLAYING;		}		// .. GET DATA METHODS .............................................................................		public function getPercentLoaded() : Number {			return _stream.bytesLoaded / _stream.bytesTotal;		}		public function getPercentPlayed() : Number {			return _stream.time / videoDuration;		}				// .. PROPERTIES ..........................................................................................		public function get smoothing() : Boolean {			return video.smoothing;		}		public function set smoothing(value : Boolean) : void {			video.smoothing = value;		}		public function setSize(width : Number, height : Number) : void {			video.width = width;			video.height = height;		}				// .. EVENTS ..............................................................................................		public function onMetaData(metadata : Object) : void {			/*			for (var i:String in metadata)			trace(i + ": " + metadata[i]);			 */			videoDuration = metadata.duration;			videoFPS = metadata.framerate;			// Stoping the video once loaded			if (status == VideoMaterialController.STOPPED)				_stream.pause();			if (!autoSize) {				setSize(videoWidth, videoHeight);			} else {				videoWidth = metadata.width;				videoHeight = metadata.height;			}			metaReceived.dispatch();		}				public function netStatusHandler(event : NetStatusEvent) : void {			switch(event.info.code) {				case "NetStream.Play.Start":					playbackStarted.dispatch();					break;				case "NetStream.Play.Stop":					if (loop) {						_stream.seek(0);					} else {						status = VideoMaterialController.STOPPED;						playbackCompleted.dispatch();					}					break;				case "NetStream.Buffer.Full":					bufferFull.dispatch();					break;			}		}		/**		 * We must update the material		 */		private function updateDimensions() : void {			_lockW = ini.getNumber("lockW", movie.width);			_lockH = ini.getNumber("lockH", movie.height);			_bitmap = new BitmapData(Math.max(1, _lockW), Math.max(1, _lockH), transparent, (transparent) ? 0x00ffffff : 0);		}		private function securityErrorHandler(e : SecurityErrorEvent) : void {			showError("A security error occured: " + e.text + " Remember that the FLV must be in the same security sandbox as your SWF.");		}		private function showError(txt : String, e : NetStatusEvent = null) : void {			if (txt == "") {				sprite.graphics.clear();				if (_text)					sprite.removeChild(_text);			} else {				sprite.graphics.beginFill(0x333333);				sprite.graphics.drawRect(0, 0, 400, 300);				sprite.graphics.endFill();				// Error text formatting				var style : StyleSheet = new StyleSheet();				var styleObj : Object = {};				styleObj["fontSize"] = 24;				styleObj["fontWeight"] = "bold";				styleObj["color"] = "#FF0000";				style.setStyle("p", styleObj);				// make textfield				_text = new TextField();				_text.width = 400;				_text.multiline = true;				_text.wordWrap = true;				_text.styleSheet = style;				_text.text = "<p>" + txt + "</p>";				sprite.addChild(_text);			}			updateDimensions();		}		/**		 * The FLV url used for rendering the material		 */		public function get file() : String {			return _file;		}		/**		 * Defines if the FLV will loop		 */		public function get loop() : Boolean {			return _loop;		}		public function set loop(b : Boolean) : void {			_loop = b;		}		/**		 * The Video Object		 */		public function get video() : Video {			return _video;		}		public function set video(newvideo : Video) : void {			if ( _video ) sprite.removeChild(_video);			_video = null;			_video = newvideo;			_video.smoothing = true;			sprite.addChild(_video);			_video.attachNetStream(_stream);		}	}}